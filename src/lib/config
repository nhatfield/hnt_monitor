get_configs() {
  for c in ${HNT_HOME}/conf/*.conf; do
    . "${c}"
  done

  if [[ "${prometheus_pg_host}" == *"hntmonitor.com"* ]]; then
    elasticsearch_url=${prometheus_pg_host// */}
    collector_storage_profile=elasticsearch
    etl_enabled=false
    elasticsearch_logging_enabled=true
  fi

  if [ "${bobcat_ips}" ]; then
    bobcat_monitor=true
    bobcat_collector_enabled=true
  fi

  if [ "${longap_addresses}" ]; then
    longap_monitor=true
    longap_collector_enabled=true
  fi

  if [ "${nebra_ips}" ]; then
    nebra_monitor=true
    nebra_collector_enabled=true
  fi

  if [ "${sensecap_serial_numbers}" ]; then
    sensecap_monitor=true
    sensecap_collector_enabled=true
  fi

  hs_mon=$(< ${HNT_HOME}/conf/address.list)

  if [ "${hs_mon}" ]; then
    hotspot_monitor=true
  fi

  if [ ! "${wallet_billing_backend_url}" ]; then
    wallet_billing_backend_url=${elasticsearch_url}
  fi

  if [ ! "${pg_admin_host}" ]; then
    pg_admin_host=${prometheus_pg_host// */}
  fi
}

get_addresses() {
  log_debug "getting hotspot addresses"

  addresses=
  pg_hosts=
  client_ids=

  if [[ "${collector_storage_profile}" == *"local"* ]] || [ ! "${collector_storage_profile}" ]; then
    client_id=${client_id:-"${client_api_key,,}"}
    addresses=$(< ${HNT_HOME}/conf/address.list)
    addresses="${client_id}:${addresses// /###}"
    get_miner_addresses
    get_wallet_addresses
    log_debug "get.addresses response [hotspots: ${addresses//###/ }]"
  fi

  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    bobcat_ips=
    longap_addresses=
    nebra_ips=
    sensecap_serial_numbers=
    wallet_client_addresses=
 
    get_addresses_elasticsearch

    client_ids=$(jq -r '.client_id' <<< "${es_addresses_payload}" 2>/dev/null | sort -u) || log_err "could not get the hotspot client_ids"
    prometheus_pg_host="$(jq -r 'select(.prometheus_pg_host != null) | .prometheus_pg_host' <<< "${es_addresses_payload}" 2>/dev/null)" || log_err "could not get the clients prometheus pg hosts"

    for c in ${client_ids}; do
      get_url=$(jq -r --arg c "${c}" 'select(.client_id == $c) | .prometheus_pg_host' <<< "${es_addresses_payload}" 2>/dev/null | sort -u) || log_err "could not get the clients prometheus gateway"
      if [[ "${get_url}" == *"hntmonitor.com"* ]] || [[ "${get_url}" == *"nginx-api"* ]]; then
        client_url=${get_url// */}
      else
        client_url=${elasticsearch_url}
      fi
      get_client_config

      if [ "${addresses}" ]; then
        addresses="${addresses} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.addresses != null) | .addresses' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else
        addresses="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.addresses != null) | .addresses' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi

      if [ "${pg_hosts}" ]; then
        pg_hosts="${pg_hosts} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.prometheus_pg_host != null) | .prometheus_pg_host' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')" 
      else
        pg_hosts="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.prometheus_pg_host != null) | .prometheus_pg_host' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi

      if [ "${bobcat_ips}" ]; then
        bobcat_ips="${bobcat_ips} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.bobcat_ips != null) | .bobcat_ips' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else
        bobcat_ips="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.bobcat_ips != null) | .bobcat_ips' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi
    
      if [ "${longap_addresses}" ]; then
        longap_addresses="${longap_addresses} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.longap_addresses != null) | .longap_addresses' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else 
        longap_addresses="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.longap_addresses != null) | .longap_addresses' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi
    
      if [ "${nebra_ips}" ]; then
        nebra_ips="${nebra_ips} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.nebra_ips != null) | .nebra_ips' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else
        nebra_ips="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.nebra_ips != null) | .nebra_ips' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi
    
      if [ "${sensecap_serial_numbers}" ]; then
        sensecap_serial_numbers="${sensecap_serial_numbers} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.sensecap_serial_numbers != null) | .sensecap_serial_numbers' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else
        sensecap_serial_numbers="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.sensecap_serial_numbers != null) | .sensecap_serial_numbers' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi

      if [ "${wallet_client_addresses}" ]; then
        wallet_client_addresses="${wallet_client_addresses} ${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.wallet != null) | .wallet' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      else
        wallet_client_addresses="${c}:$(jq -r --arg c "${c}" 'select(.client_id == $c) | select(.wallet != null) | .wallet' <<< "${client_config_payload}" 2>/dev/null | sort -u | sed 's% %###%g')"
      fi
    done

    if [[ "${elasticsearch_url}" == *"hntmonitor"* ]] || [[ "${elasticsearch_url}" == *"nginx-api"* ]]; then
      if [ "${bobcat_ips}" ]; then
        bobcat_collector_enabled=true
        log_debug "setting bobcat_collector_enabled [true]"
      fi
    
      if [ "${longap_addresses}" ]; then
        longap_collector_enabled=true
        log_debug "setting longap_collector_enabled [true]"
      fi
    
      if [ "${nebra_ips}" ]; then
        nebra_collector_enabled=true
        log_debug "setting nebra_collector_enabled [true]"
      fi
    
      if [ "${sensecap_serial_numbers}" ]; then
        sensecap_collector_enabled=true
        log_debug "setting sensecap_collector_enabled [true]"
      fi

      if [ "${syncrobit_ips}" ]; then
        syncrobit_collector_enabled=true
        log_debug "setting syncrobit_collector_enabled [true]"
      fi
    fi

    log_debug "get.addresses response [hotspots: ${addresses//###/ }] [prometheus_gw: ${pg_hosts//###/ }] [bobcats: ${bobcat_ips//###/ }] [longaps: ${longap_addresses//###/ }] [nebras: ${nebra_ips//###/ }] [sensecaps: ${sensecap_serial_numbers//###/ }] [wallets: ${wallet_client_addresses}]"
  fi

}

get_miner_addresses() {
  if [ "${bobcat_ips}" ]; then
    bobcat_ips="${client_api_key,,}:${bobcat_ips// /###}"
    log_debug "get.miner.bobcat.ips response [${bobcat_ips//###/ }]"
  fi
  
  if [ "${longap_addresses}" ]; then
    longap_addresses="${client_api_key,,}:${longap_addresses// /###}"
    log_debug "get.miner.longap.addresses response [${longap_addresses//###/ }]"
  fi
  
  if [ "${nebra_ips}" ]; then
    nebra_ips="${client_api_key,,}:${nebra_ips// /###}"
    log_debug "get.miner.nebra.ips response [${nebra_ips//###/ }]"
  fi
  
  if [ "${sensecap_serial_numbers}" ]; then
    sensecap_serial_numbers="${client_api_key,,}:${sensecap_serial_numbers// /###}"
    log_debug "get.miner.sensecap.serial.numbers response [${sensecap_serial_numbers//###/ }]"
  fi
}

get_wallet_addresses() {
  if [[ "${id}" == *"wallet"* ]] || [[ "${id}" == *"billing"* ]]; then
    if [ "${wallet_client_addresses}" ]; then
      wallet_client_addresses="${client_api_key,,}:${wallet_client_addresses// /###}"
      log_debug "get.wallet.addresses response [${wallet_client_addresses//###/ }]"
    fi
  fi
}

get_addresses_elasticsearch() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    if [[ "${elasticsearch_url}" == *"hntmonitor"* ]] || [[ "${elasticsearch_url}" == *"nginx-api"* ]]; then
      add_index="hnt-account"
    else
      add_index="hnt-"
    fi
    get_curl_options
    q=account
    n=0

    es_query_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/${add_index}*/_search?filter_path=hits.hits._source&size=${elasticsearch_item_query_limit}&q=_id:${q}")

    while [ ! "$(elasticserarch_query_success_payload)" ]; do
      if [ "${n}" -ge "${api_retry_threshold}" ]; then
        log_err "maximum retries have been reached ${api_retry_threshold}. could not retrieve [${q}] elasticsearch results: [${es_query_payload}]"
        exit 1
      fi

      log_warn "bad response from the elasticsearch api while retrieving [${q}] data. Retrying in 5 seconds..."
      ((n++)) || true
      sleep "${api_retry_wait}"
      es_query_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/${add_index}*/_search?filter_path=hits.hits._source&size=${elasticsearch_item_query_limit}&q=_id:${q}")
    done

    es_addresses_payload=$(jq '.hits.hits[]._source' <<< ${es_query_payload})
    log_debug "get.addresses.elasticsearch response $(jq -c <<< "${es_addresses_payload}")"
  fi
}

get_client_config() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    get_curl_options
    q=account
    n=0

    es_query_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${client_url}/hnt-account/_search?filter_path=hits.hits._source&size=${elasticsearch_item_query_limit}&q=_id:${q}")

    while [ ! "$(elasticserarch_query_success_payload)" ]; do
      if [ "${n}" -ge "${api_retry_threshold}" ]; then
        log_err "maximum retries have been reached ${api_retry_threshold}. could not retrieve [${q}] elasticsearch results: [${es_query_payload}]"
        exit 1
      fi

      log_warn "bad response from the elasticsearch api while retrieving [${q}] data. Retrying in 5 seconds..."
      ((n++)) || true
      sleep "${api_retry_wait}"
      es_query_payload=$(curl ${curl_options} -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${client_url}/hnt-account/_search?filter_path=hits.hits._source&size=${elasticsearch_item_query_limit}&q=_id:${q}")
    done

    client_config_payload=$(jq '.hits.hits[]._source' <<< ${es_query_payload})
    log_debug "get.client.config response $(jq -c <<< "${client_config_payload}")"
  fi
}

get_curl_options() {
  curl_options="-s -L --speed-limit 50 --speed-time 60 -A \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (K HTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36\""
  if [ "${insecure_api}" == "true" ]; then
    curl_options="${curl_options} -k"
  fi
}

get_prometheus_pg_host() {
  if [[ "${collector_storage_profile}" == *"elasticsearch"* ]] && [ "${elasticsearch_url}" ]; then
    prometheus_pg_host="$(echo "${pg_hosts}" | tr ' ' '\n' | sort -u | grep "^${client_id}" | sed "s%^${client_id}:%%;s%###% %g")"
  fi
}

send_addresses_elasticsearch() {
  if [ "${elasticsearch_url}" ]; then
    get_curl_options
    docid='{ "docId" : "account" }'
    ct=$(echo "$(date +%Y-%m-%dT%H:%M:%S)" | sed "s%^%{ \"collectionTime\": \"%;s%$%\" }%")
    client="{ \"client_id\": \"${client_api_key,,}\" }"
    prometheus=$(echo "${prometheus_pg_host}" | sed "s% $%%;s%^%{ \"prometheus_pg_host\": \"%;s%$%\" }%")

    if [[ ! "${elasticsearch_url}" == *"hntmonitor.com"* ]]; then
      hotspot=$(< ${HNT_HOME}/conf/address.list)
      hotspot=$(echo "${hotspot}" | tr '\n' ' ' | sed "s% $%%;s%^%{ \"addresses\": \"%;s%$%\" }%")
      bobcat=$(echo "${bobcat_ips}" | sed "s% $%%;s%^%{ \"bobcat_ips\": \"%;s%$%\" }%")
      longap=$(echo "${longap_addresses}" | sed "s% $%%;s%^%{ \"longap_addresses\": \"%;s%$%\" }%")
      nebra=$(echo "${nebra_ips}" | sed "s% $%%;s%^%{ \"nebra_ips\": \"%;s%$%\" }%")
      sensecap=$(echo "${sensecap_serial_numbers}" | sed "s% $%%;s%^%{ \"sensecap_serial_numbers\": \"%;s%$%\" }%")
      wallet=$(echo "${wallet_client_addresses}" | sed "s% $%%;s%^%{ \"wallet\": \"%;s%$%\" }%")

      jq -s '(.[0] + .[1] + .[2] + .[3] + .[4] + .[5] + .[6] + .[7] + .[8] + .[9])' <<< "${hotspot} ${bobcat} ${longap} ${nebra} ${sensecap} ${client} ${prometheus} ${wallet} ${docid} ${ct}" > /tmp/addresses || log_err "could not create address list"
    
      es_post=$(curl ${curl_options} -X POST -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/hnt-account/_doc/account" -d @/tmp/addresses) || log_err "could not send [account] to elasticsearch"
      rm -f /tmp/addresses
      log_debug "send.addresses.elasticsearch.account response ${es_post}"
    fi

    jq -s '(.[0] + .[1] + .[2] + .[3])' <<< "${client} ${prometheus} ${docid} ${ct}" > /tmp/addresses || log_err "could not create account profile"

    es_post=$(curl ${curl_options} -X POST -H "apikey: ${client_api_key}" -H "Content-Type: application/json" "${elasticsearch_url}/hnt-${client_api_key,,}/_doc/account" -d @/tmp/addresses) || log_err "could not send [account] to elasticsearch"
    rm -f /tmp/addresses
    log_debug "send.addresses.elasticsearch response ${es_post}"
  fi
}

search_query() {
cat <<EOF
{
  "query": {
    "bool": {
      "must": [
        { "match": { "docId": "${q//\./}" } }
      ]
    }
  }
}
EOF
}
