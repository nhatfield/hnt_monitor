#!/usr/bin/env bash

set -euo pipefail

OPT=${1:-"run"}
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
cd ${DIR}

. test.conf

container=${1:-""}
image=${2:-""}
hotspot="hotspot"
version=${version:-"$(grep '#' ../../HISTORY.md | sed 's%# %%' | sort -V | tail -1)"}
echo "Version: ${version}"
PROMETHEUS_PG_HOST=${PROMETHEUS_PG_HOST:-'""'}
ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-'""'}
DOCKER_NETWORK=${DOCKER_NETWORK:-"bridge"}
COLLECTOR_STORAGE_PROFILE=${COLLECTOR_STORAGE_PROFILE:-"local"}
CLIENT_API_KEY=${CLIENT_API_KEY:-"local"}

if [ ! "${container}" ]; then
  echo "Missing container name"
  exit 1
fi

if [ ! "${image}" ]; then
  echo "Missing container image"
  exit 1
fi


id=etl.test
test_url="http://devbox.blackem.net:9999"

test() {
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - starting validation"
  cleanup 2>/dev/null || true

  docker run -d -e HNT_DEBUG=true \
    --network=${DOCKER_NETWORK} \
    -e HNT_WALLET_ETL_BILLING="true" \
    -e HNT_WALLET_COLLECTOR_BILLING_ENABLED="true" \
    -e HNT_WALLET_ETL_CLIENT="true" \
    -e HNT_WALLET_COLLECTOR_CLIENT_ENABLED="true" \
    -e HNT_BILLING_ETL="true" \
    -e HNT_BOBCAT_IPS="123 456" \
    -e HNT_NEBRA_IPS="123 456" \
    -e HNT_SENSECAP_SERIAL_NUMBERS=${hotspot} \
    -e HNT_HOTSPOT_ADDRESSES=${hotspot} \
    -e HNT_LONGAP_ADDRESSES=${hotspot} \
    -e HNT_PROMETHEUS_PG_HOST=${PROMETHEUS_PG_HOST} \
    -e bobcat_test_url=${test_url}/bobcat \
    -e helium_test_url=${test_url}/helium \
    -e hotspot_test_url=${test_url} \
    -e nebra_test_url=${test_url}/nebra/data \
    -e longap_test_url=${test_url}/longap/status \
    -e sensecap_test_url=${test_url}/sensecap/data \
    -e HNT_COLLECTOR_STORAGE_PROFILE=${COLLECTOR_STORAGE_PROFILE} \
    -e HNT_ELASTICSEARCH_URL=${ELASTICSEARCH_URL} \
    -e HNT_CLIENT_API_KEY=${CLIENT_API_KEY} \
    --name ${container} ${image} 1>/dev/null || cleanup_err

  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - waiting for data to process ..."
  sleep 150
  logs=$(docker logs ${container})

  for v in $(set -o posix; set | sed 's% %:#:%g'); do
    if [[ "${v}" == "test_"*  ]]; then

      KEY=$(echo "${v}" | sed 's%=.*%%;s%__%##%g;s%test_%%;s%##%_%g' | tr 'A-Z' 'a-z')
      VAL=$(echo "${v}" | sed "s%.*=%%;s%[']%%g")

      if [ ! "${KEY}" == "timestamps" ]; then
        conf_var=${KEY}
        if [ "$(echo "${VAL//:#:/ }" | tr ' ' '\n' | wc -l)" -eq 1 ]; then
          echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - validating [${KEY}]: ${VAL//:#:/ }"
          grep -q "${KEY}: ${VAL}" <<< "${logs}" || cleanup_err
        else
          for v in ${VAL//:#:/ }; do
            echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - validating [${KEY}]: ${v}"
            grep -q "${KEY}: ${v}" <<< "${logs}" || cleanup_err
          done
        fi
      else
        for t in ${VAL//:#:/ }; do
          conf_var="[timestamp]"
          echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - validating [timestamp]: ${t}"
          grep -q "${t}" <<< "${logs}" || cleanup_err
        done
      fi
    fi
  done

  conf_var=version.status
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - checking for correct version in the logs"
  if [ ! "$(grep "${version//./\.}" <<< "${logs}" | wc -l)" -eq 1 ]; then
    echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - couldn't detect the version in the logs"
    cleanup_err
  fi

  conf_var=error.status
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - checking for errors in the logs"
  if [ "$(grep "\[ERROR\]" <<< "${logs}" | wc -l)" -ge 1 ]; then
    echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - detected errors in the logs"
    grep "\[ERROR\]" <<< "${logs}" || true
    cleanup_err
  fi
}

cleanup_err() {
  echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - validation failed"
  echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - dumping docker logs to error.log"
  docker logs ${container} >> error.log || true
  docker cp ${container}:/opt/hnt_monitor/conf/hnt_monitor.conf . || true
  echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - last validation: ${conf_var}"
  cleanup
  echo "$(date +%Y-%m-%dT%H:%M:%S) [ERROR]: [$id] - FAILED!"
  exit 1
}

cleanup() {
  echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - cleaning up workspace"
  docker rm -f ${container} > /dev/null || true
}

test
cleanup
echo "$(date +%Y-%m-%dT%H:%M:%S) [INFO]: [$id] - PASSED!"
